// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gameengine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameenginClient is the client API for Gameengin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameenginClient interface {
	SetScore(ctx context.Context, in *SetScoreRequest, opts ...grpc.CallOption) (*SetScoreResponse, error)
	GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error)
}

type gameenginClient struct {
	cc grpc.ClientConnInterface
}

func NewGameenginClient(cc grpc.ClientConnInterface) GameenginClient {
	return &gameenginClient{cc}
}

func (c *gameenginClient) SetScore(ctx context.Context, in *SetScoreRequest, opts ...grpc.CallOption) (*SetScoreResponse, error) {
	out := new(SetScoreResponse)
	err := c.cc.Invoke(ctx, "/gameengine.v1.gameengin/SetScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameenginClient) GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error) {
	out := new(GetSizeResponse)
	err := c.cc.Invoke(ctx, "/gameengine.v1.gameengin/GetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameenginServer is the server API for Gameengin service.
// All implementations must embed UnimplementedGameenginServer
// for forward compatibility
type GameenginServer interface {
	SetScore(context.Context, *SetScoreRequest) (*SetScoreResponse, error)
	GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error)
	mustEmbedUnimplementedGameenginServer()
}

// UnimplementedGameenginServer must be embedded to have forward compatible implementations.
type UnimplementedGameenginServer struct {
}

func (UnimplementedGameenginServer) SetScore(context.Context, *SetScoreRequest) (*SetScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScore not implemented")
}
func (UnimplementedGameenginServer) GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSize not implemented")
}
func (UnimplementedGameenginServer) mustEmbedUnimplementedGameenginServer() {}

// UnsafeGameenginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameenginServer will
// result in compilation errors.
type UnsafeGameenginServer interface {
	mustEmbedUnimplementedGameenginServer()
}

func RegisterGameenginServer(s grpc.ServiceRegistrar, srv GameenginServer) {
	s.RegisterService(&Gameengin_ServiceDesc, srv)
}

func _Gameengin_SetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameenginServer).SetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameengine.v1.gameengin/SetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameenginServer).SetScore(ctx, req.(*SetScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gameengin_GetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameenginServer).GetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameengine.v1.gameengin/GetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameenginServer).GetSize(ctx, req.(*GetSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gameengin_ServiceDesc is the grpc.ServiceDesc for Gameengin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gameengin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameengine.v1.gameengin",
	HandlerType: (*GameenginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetScore",
			Handler:    _Gameengin_SetScore_Handler,
		},
		{
			MethodName: "GetSize",
			Handler:    _Gameengin_GetSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/gamengine/v1/gameengine.proto",
}
